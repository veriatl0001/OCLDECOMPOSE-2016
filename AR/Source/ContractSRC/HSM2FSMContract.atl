module HSM2FSM;

create OUT : FSM from IN : HSM;



--PRECONDITION HSM

--@pre
helper context HSM!StateMachine def: unique_hsm_sm_names(): Boolean = -- different state machines have different names
  HSM!StateMachine.allInstances()->forAll(s1,s2 | s1<>s2 implies s1.name<>s2.name);

--@pre  
helper context HSM!AbstractState def: unique_hsm_state_names(): Boolean = -- states have unique names
  HSM!AbstractState.allInstances()->forAll(s1,s2 | s1<>s2 implies s1.name<>s2.name);	

--@pre  
helper context HSM!AbstractState def: hsm_state_multi_lower(): Boolean = -- a state does belong to at least one state machine
  HSM!AbstractState.allInstances()->forAll(s | not s.stateMachine.oclIsUndefined());

--@pre  
helper context HSM!AbstractState def: hsm_state_multi_upper(): Boolean = -- a state does belong to at most one state machine
  HSM!AbstractState.allInstances()->forAll(s | 
    HSM!StateMachine.allInstances()->forAll(sm1,sm2 | 
      s.stateMachine=sm1 and s.stateMachine=sm2 implies sm1=sm2));

--@pre	  
helper context HSM!AbstractState def: hsm_transition_composite_upper(): Boolean = -- at most one compositeState
  HSM!AbstractState.allInstances()->forAll(c1,c2 | 
    c1.oclIsTypeOf(HSM!CompositeState) and c2.oclIsTypeOf(HSM!CompositeState) implies c1=c2);
    
--@pre
helper context HSM!Transition def: hsm_transition_multi_lower(): Boolean = -- a transition does belong to at least one state machine
  HSM!Transition.allInstances()->forAll(t | not t.stateMachine.oclIsUndefined());

--@pre  
helper context HSM!Transition def: hsm_transition_multi_upper(): Boolean = -- a transition does belong to at most one state machine
  HSM!Transition.allInstances()->forAll(t | 
    HSM!StateMachine.allInstances()->forAll(sm1,sm2 | 
      t.stateMachine=sm1 and t.stateMachine=sm2 implies sm1=sm2));

--@pre	 
helper context HSM!Transition def: hsm_transition_src_multi_lower(): Boolean = -- a transition has at least one source
  HSM!Transition.allInstances()->forAll(t | not t.source.oclIsUndefined());

--@pre  
helper context HSM!Transition def: hsm_transition_src_multi_upper(): Boolean = -- a transition has at most one source
  HSM!Transition.allInstances()->forAll(t | 
    HSM!AbstractState.allInstances()->forAll(s1,s2 | 
      t.source=s1 and t.source=s2 implies s1=s2));

--@pre
helper context HSM!Transition def: hsm_transition_trg_multi_lower(): Boolean = -- a transition has at least one target
  HSM!Transition.allInstances()->forAll(t | not t.target.oclIsUndefined());

--@pre  
helper context HSM!Transition def: hsm_transition_trg_multi_upper(): Boolean = -- a transition has at most one target
  HSM!Transition.allInstances()->forAll(t | 
    HSM!AbstractState.allInstances()->forAll(s1,s2 | 
      t.target=s1 and t.target=s2 implies s1=s2));
     
--@pre	 
helper context HSM!Transition def: hsm_transition_src_contain_sm(): Boolean = -- transition and source in the same state machine
  HSM!Transition.allInstances()->forAll(t |
    HSM!AbstractState.allInstances()->forAll(s |
      t.source=s implies HSM!StateMachine.allInstances()->forAll(sm1,sm2 | 
        t.stateMachine=sm1 and s.stateMachine=sm2 implies sm1=sm2)));

--@pre		
helper context HSM!Transition def: hsm_transition_trg_contain_sm(): Boolean = -- transition and target in the same state machine
  HSM!Transition.allInstances()->forAll(t |
    HSM!AbstractState.allInstances()->forAll(s |
      t.target=s implies HSM!StateMachine.allInstances()->forAll(sm1,sm2 | 
        t.stateMachine=sm1 and s.stateMachine=sm2 implies sm1=sm2)));
		
--@pre
helper context HSM!Transition def: hsm_transition_contain_sm(): Boolean = -- source and target in the same state machine
  HSM!Transition.allInstances()->forAll(t |
    HSM!AbstractState.allInstances()->forAll(s1,s2 |
      t.source=s1 and t.target=s2 implies HSM!StateMachine.allInstances()->forAll(sm1,sm2 | 
        s1.stateMachine=sm1 and s2.stateMachine=sm2 implies sm1=sm2)));


--POSTCONDITION FSM 
--@post
helper context FSM!Transition def: post_fsm_transition_trg_multi_lower(): Boolean = --fsm_transition_trg_multi_lower
  FSM!Transition.allInstances()->forAll(t |not t.target.oclIsUndefined());

--@post
helper context FSM!Transition def: post_fsm_transition_src_multi_lower(): Boolean = --fsm_transition_src_multi_lower
  FSM!Transition.allInstances()->forAll(t |not t.source.oclIsUndefined());

--@post
helper context FSM!StateMachine def: post_unique_fsm_sm_names(): Boolean = --unique_fsm_sm_names
 FSM!StateMachine.allInstances()->forAll(s1 | 
  	FSM!StateMachine.allInstances()->forAll(s2 | 
  	  s1<>s2 implies s1.name<>s2.name));

--@post  
helper context FSM!AbstractState def: post_unique_fsm_state_names(): Boolean = --unique_fsm_state_names
  FSM!AbstractState.allInstances()->forAll(s1 |
  	FSM!AbstractState.allInstances()->forAll(s2 |
  	  s1<>s2 implies s1.name<>s2.name));	

--@post
helper context FSM!AbstractState def: post_fsm_state_multi_lower(): Boolean = --fsm_state_multi_lower
  FSM!AbstractState.allInstances()->forAll(s | not s.stateMachine.oclIsUndefined());
    
--@post
helper context FSM!Transition def: post_fsm_transition_multi_lower(): Boolean = --fsm_transition_multi_lower
  FSM!Transition.allInstances()->forAll(t | not t.stateMachine.oclIsUndefined());

--@post
helper context FSM!Transition def: post_fsm_transition_src_multi_upper(): Boolean = --fsm_transition_src_multi_upper
  FSM!Transition.allInstances()->forAll(t | 
   FSM!AbstractState.allInstances()->forAll(s1 | 
     FSM!AbstractState.allInstances()->forAll(s2 |
       (t.source=s1 and t.source=s2) implies s1=s2)));


